=head1 NAME

Pod::MultiLang::Dict - heading dictionary manager
J<< ja;Pod::MultiLang::Dict - 見出し辞書管理 >>

=head1 SYNOPSIS

 my $dictmgr = Pod::MultiLang::Dict->new();
 $dictmgr->load_dict(@langs);
 my @tranlates = $dictmgr->find_word([@langs],$word);

=head1 DESCRIPTION

heading word transrate dictionary for Pod::MultiLang.
J<< ja;
Pod::MultiLang 用見出し語変換辞書.
>>

dictional for each language is placed at Pod::MultiLang::Dict::xx.
loaded by use statement from load_dict;
J<< ja;
各言語用の辞書は, Pod::MultiLang::Dict::xx に
配置します. load_dict から use されます.
>>

=head1 METHODS

=over

=item new

  my $dictmgr = Pod::MultiLang::Dict->new();

create an instance.
but all instance has same condition.
J<< ja;
インスタンスの作成.
でもパッケージ変数で処理してるのでどのインスタンスでも
内部状態は同じ^^;;
>>

=item load_dict

  $dictmgr->load_dict(@langs);
  $dictmgr->load_dict(\@langs);

load dictionary for specified languals.
J<< ja;
辞書のロード. 
多重ロードしちゃっても大丈夫.
>>

=item find_word

  @multilingual = $dictmgr->find_word(\@langs,$text);

translate english to other.
"a AND b" is acceptable.
J<< ja;
指定した言語に変換.
変換がなかったところには undef が入ります.
a AND b とかの入力だと, a の訳, AND の訳, b の訳 を
つなげて全体の訳になります.
多少なら複数形も吸収します.
入力は英語でよろしく.
>>

=back

=head1 METHODS required for dictionary
J<< ja;辞書に必要なメソッド >>

=over

=item static_table

  $text = $dictmgr->make_link

returns hash reference which constains 
'english' => 'translated'.
J<< ja;
語句 => 訳語 なハッシュのリファレンスを返す.
>>

=item make_linktext

  $text = $dictmgr->make_linktext($lang,$name,$section);

make link text for LZ<><> interior sequence which has 
no text part.
J<< ja;
指定した言語で, ラベルを持たない LZ<><> 用のラベルを生成.
>>

=back

